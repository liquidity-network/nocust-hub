"""
Django settings for operator_api project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0b)c&j67t3rspn33^=e295)d1_2@c=3gbf_mjhz+4gnzz_o%9n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not (os.environ.get('RUNNING_IN_PRODUCTION', '').lower() == 'true')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost').split(',')

ENABLE_PROFILING = os.environ.get('ENABLE_PROFILING', '').lower() == 'true'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # CHANNELS
    'channels',
    # CELERY
    'django_celery_beat',
    # REST API
    'django_filters',
    'rest_framework',
    'corsheaders',
    # APP
    'ledger',
    'contractor',
    'auditor',
    'transactor',
    'admission',
    'swapper',
    'heartbeat',
    'leveller',
    'synchronizer',
    'tos',
    # DOCS
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'EXCEPTION_HANDLER': 'operator_api.exception_handler.custom_exception_handler'
}

if ENABLE_PROFILING:
    INSTALLED_APPS += ['silk']
    MIDDLEWARE = ['silk.middleware.SilkyMiddleware'] + MIDDLEWARE
    SILKY_MAX_RECORDED_REQUESTS = int(
        os.environ.get('SILKY_MAX_RECORDED_REQUESTS', 10**3))
    SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = int(
        os.environ.get('SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT', 10))
    SILKY_INTERCEPT_PERCENT = int(
        os.environ.get('SILKY_INTERCEPT_PERCENT', 50))
    SILKY_META = True
    SILKY_MAX_REQUEST_BODY_SIZE = int(
        os.environ.get('SILKY_MAX_REQUEST_BODY_SIZE', -1))
    SILKY_MAX_RESPONSE_BODY_SIZE = int(
        os.environ.get('SILKY_MAX_RESPONSE_BODY_SIZE', -1))


ROOT_URLCONF = 'operator_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'operator_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'liquidity',
        'USER': 'liquidity',
        'PASSWORD': 'liquidity',
        'HOST': os.environ.get('POSTGRES_SERVER_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_SERVER_PORT', '5432')
    }
}

# Loggers
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'machine': {
            'format': '[%(levelname)s]|%(asctime)s|%(name)s|%(message)s|'
        },
        'human': {
            'format': '[%(asctime)s %(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'human',
        },
        'file_err': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/hub/error.log',
            'maxBytes': 1024*1024,  # 1 MB
            'formatter': 'machine',
        },
    },
    'loggers': {
        # celery task logs
        'celery.task': {
            'level': 'WARNING',
            'handlers': ['console', 'file_err' ],
        },
        # stack trace & all remaining app logs
        '': {
            'level': 'WARNING',
            'handlers': ['console', 'file_err'],
        },
    },
} if not DEBUG else None

CELERY_WORKER_HIJACK_ROOT_LOGGER = False

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# CROSS ORIGIN REQUESTS
CORS_ORIGIN_WHITELIST = os.environ.get(
    'CORS_ORIGIN_WHITELIST', 'http://localhost:3000,http://localhost:4200').split(',')

CORS_ORIGIN_ALLOW_ALL = os.environ.get(
    'CORS_ORIGIN_ALLOW_ALL', '').lower() == 'true'

CORS_ALLOW_CREDENTIALS = True

# Cookies
SESSION_COOKIE_HTTPONLY = True

# Liquidity.Network
HUB_OWNER_ACCOUNT_ADDRESS = os.environ.get(
    'HUB_OWNER_ACCOUNT_ADDRESS',
    '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1')
HUB_OWNER_ACCOUNT_KEY = os.environ.get(
    'HUB_OWNER_ACCOUNT_KEY',
    '4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d')

HUB_LQD_CONTRACT_ADDRESS = os.environ.get(
    'HUB_LQD_CONTRACT_ADDRESS',
    '0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7')
HUB_LQD_CONTRACT_CONFIRMATIONS = int(os.environ.get(
    'HUB_LQD_CONTRACT_CONFIRMATIONS',
    3))

HUB_BLOCK_FETCH_TIMEOUT = float(os.environ.get(
    'HUB_BLOCK_FETCH_TIMEOUT',
    10.0))
SERVER_NAME = os.environ.get("SERVER_NAME", "Rinkeby")
HUB_ETHEREUM_NODE_URL = os.environ.get(
    'HUB_ETHEREUM_NODE_URL', 'http://localhost:8545')
HUB_ETHEREUM_NETWORK_IS_POA = os.environ.get(
    'HUB_ETHEREUM_NETWORK_IS_POA', '').lower() == 'true'
# TODO HUB_MAX_BLOCKS_PER_SYNC = os.environ.get('HUB_MAX_BLOCKS_PER_SYNC', 50)

HUB_TRANSFER_TIMEOUT_SECONDS = os.environ.get(
    'HUB_TRANSFER_TIMEOUT_SECONDS', 60)

# Redis Cache
CACHE_REDIS_HOST = os.environ.get('CACHE_REDIS_HOST', 'localhost')
CACHE_REDIS_PORT = int(os.environ.get('CACHE_REDIS_PORT', 6379))

# default db used by mutex locks
MUTEX_REDIS_URI = 'redis://{}:{}/0'.format(
    CACHE_REDIS_HOST,
    CACHE_REDIS_PORT)

# db 1 to be used by celery
CELERY_REDIS_URI = 'redis://{}:{}/1'.format(
    CACHE_REDIS_HOST,
    CACHE_REDIS_PORT)

# db 2 to be used by channels
CHANNELS_REDIS_URI = 'redis://{}:{}/2'.format(
    CACHE_REDIS_HOST,
    CACHE_REDIS_PORT)

# default db used by cache backend
CACHE_REDIS_URI = 'redis://{}:{}/3'.format(
    CACHE_REDIS_HOST,
    CACHE_REDIS_PORT)

# django-redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CACHE_REDIS_URI,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    }
}

# Celery Settings
CELERY_BROKER_URL = CELERY_REDIS_URI
CELERY_RESULT_BACKEND = CELERY_REDIS_URI

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_CREATE_MISSING_QUEUES = True

# Django Channels
ASGI_APPLICATION = "operator_api.routing.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [CHANNELS_REDIS_URI],
        },
    },
}

# Email Notifications
EMAIL_HOST = os.environ.get('EMAIL_HOST', None)
EMAIL_PORT = os.environ.get('EMAIL_PORT', None)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None)
EMAIL_APP_ADDRESS = os.environ.get('EMAIL_APP_ADDRESS', None)
EMAIL_USE_TLS = True

# Service Level Agreement
SLA_TOKEN_ADDRESS = os.environ.get(
    'SLA_TOKEN_ADDRESS',
    '0xe982E462b094850F12AF94d21D470e21bE9D0E9C')
SLA_PRICE = int(1e18)
SLA_DURATION = 30  # in days
SLA_RECIPIENT_ADDRESS = os.environ.get(
    'SLA_RECIPIENT_ADDRESS',
    HUB_OWNER_ACCOUNT_ADDRESS)
SLA_RECIPIENT_KEY = os.environ.get(
    'SLA_RECIPIENT_KEY',
    HUB_OWNER_ACCOUNT_KEY)
SLA_THRESHOLD = os.environ.get(
    'SLA_THRESHOLD',
    100)

# Swap Engine
SWAPS_ENABLED = os.environ.get('SWAPS_ENABLED', 'false').lower() == 'true'

# Owner balance threshold default is 1 ETH
OWNER_BALANCE_THRESHOLD = os.environ.get('OWNER_BALANCE_THRESHOLD', int(1e18))

# Swap persistence limit in eons
SWAPS_PERSISTENCE_LIMIT = os.environ.get('SWAPS_PERSISTENCE_LIMIT', 20)

BULK_ADMISSION_LIMIT = os.environ.get('BULK_ADMISSION_LIMIT', 20)

MATCHING_IP_WHITELIST = os.environ.get(
    'MATCHING_IP_WHITELIST', '127.0.0.1').split(',')

NOTIFICATION_HOOK_URL = os.environ.get('NOTIFICATION_HOOK_URL', None)

SWAGGER_SETTINGS = {
    'DEFAULT_AUTO_SCHEMA_CLASS': 'operator_api.swagger_auto_schema.ErrorResponseAutoSchema',
    'DEFAULT_INFO': 'operator_api.urls.api_info',
}

TOS_URL = os.environ.get(
    'TOS_URL', 'https://liquidity-wallet.firebaseio.com/config.json')

TOS_UPDATE_WINDOW_DAYS = int(os.environ.get('TOS_UPDATE_WINDOW_DAYS', 7))
